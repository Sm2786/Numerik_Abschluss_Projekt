clear all
% Load constants
load('data/constants.mat');

time_ode= 0:constants.timeStep:constants.simulationTimeODE;
zeit = time_ode';
tSpan = [0, constants *24 * 3600];
pos0 = [constants.earthOrbitRadius + constants.probeIntialOrbitHeight, 0, 0, constants.probeIntialVelocity];

[t, u] = ode45(@(t, pos) calculateTrajectory(constants,pos), zeit, pos0);
figure;
%% figure; visualisation der Geschwindigkeit (nur f√ºr Info)
subplot(2,1,1);
plot(t, u(:,3)); % vx (Geschwindigkeit in x)
xlabel('Zeit (s)');
ylabel('vx (m/s)');
title('Geschwindigkeit in x-Richtung');
grid on;

subplot(2,1,2);
plot(t, u(:,4)); % vy (Geschwindigkeit in y)
xlabel('Zeit (s)');
ylabel('vy (m/s)');
title('Geschwindigkeit in y-Richtung');
grid on;

plot(u(:,1), u(:,2))
hold on;
plot(0,0, 'ro','MarkerSize',10,'MarkerFaceColor','r')




